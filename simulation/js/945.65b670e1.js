"use strict";(self["webpackChunkexp_6"]=self["webpackChunkexp_6"]||[]).push([[945],{6945:function(t,a,e){e.r(a),e.d(a,{default:function(){return H}});var n=e(3396),l=e(9242);const o=t=>((0,n.dD)("data-v-3249c55a"),t=t(),(0,n.Cn)(),t),r=o((()=>(0,n._)("header",{style:{padding:"20px"}},[(0,n._)("h5",null,"HELP"),(0,n._)("h1",null,"String Compare Function")],-1))),s=o((()=>(0,n._)("div",{id:"snackbar"},"Some text some message..",-1))),c={class:"flex-row"},i=(0,n.uE)('<div style="width:50%;" data-v-3249c55a><h2 data-v-3249c55a>Theory</h2><div class="outbox" data-v-3249c55a><p data-v-3249c55a>String str1 = &quot;Function&quot;;</p><p data-v-3249c55a>String str1 = &quot;function&quot;;</p><p data-v-3249c55a>boolean match= str1.equals(str2);<span id="comment" data-v-3249c55a>//equals() method</span></p><span id="comment" data-v-3249c55a>//match will be initialized to false</span><p data-v-3249c55a>String str1 = &quot;apple&quot;;</p><p data-v-3249c55a>String str2 = &quot;banana&quot;;</p><p data-v-3249c55a>int result = str1.compareTo(str2); <span id="comment" data-v-3249c55a>//compareTo() method</span></p><span id="comment" data-v-3249c55a>//match will be initialized to a negative integer</span><br data-v-3249c55a></div><div class="content" data-v-3249c55a><p data-v-3249c55a> The equals() method compares the content of two strings and returns true if the contents are equal, and false otherwise. </p><p data-v-3249c55a>The compareTo() method compares two strings lexicographically. </p></div></div>',1),u={style:{width:"50%"}},d=o((()=>(0,n._)("h2",null,"Try it yourself",-1))),p={class:"outbox"},m=o((()=>(0,n._)("p",null,'String s1 = "Hello";',-1))),v=o((()=>(0,n._)("p",null,'String s2 = "Pillow";',-1))),h=o((()=>(0,n._)("br",null,null,-1))),_=o((()=>(0,n._)("br",null,null,-1))),b=o((()=>(0,n._)("span",{id:"comment"},"//compare the content of two strings",-1))),g=o((()=>(0,n._)("br",null,null,-1))),w=o((()=>(0,n._)("br",null,null,-1))),y=o((()=>(0,n._)("br",null,null,-1))),f=o((()=>(0,n._)("br",null,null,-1))),k=o((()=>(0,n._)("br",null,null,-1))),q=o((()=>(0,n._)("span",{id:"comment"},"//compare two strings lexicographically",-1))),T={id:"buttons",class:"relative"},x={key:0,class:"navitem"};function C(t,a,e,o,C,S){return(0,n.wg)(),(0,n.iD)(n.HY,null,[r,s,(0,n._)("main",null,[(0,n._)("div",c,[i,(0,n._)("div",u,[d,(0,n._)("div",p,[m,v,(0,n.Uk)(" boolean result="),(0,n.wy)((0,n._)("input",{type:"text","onUpdate:modelValue":a[0]||(a[0]=a=>t.one=a)},null,512),[[l.nr,t.one]]),(0,n.Uk)("; "),h,_,b,g,w,y,(0,n.Uk)(" int ans="),(0,n.wy)((0,n._)("input",{type:"text","onUpdate:modelValue":a[1]||(a[1]=a=>t.two=a)},null,512),[[l.nr,t.two]]),(0,n.Uk)("; "),f,k,q]),(0,n._)("button",{class:"button-9",onClick:a[2]||(a[2]=t=>S.validate_one())},"Validate")])]),(0,n._)("footer",null,[(0,n._)("div",T,[1===t.currentStep?((0,n.wg)(),(0,n.iD)("button",x,"Next")):(0,n.kq)("",!0)])])])],64)}var S={data(){return{}},methods:{incorrect(t){var a=document.getElementById("snackbar");a.innerHTML=t,a.style.backgroundColor="red",a.className="show",setTimeout((function(){a.className=a.className.replace("show","")}),3e3)},correct1(){var t=document.getElementById("snackbar");t.innerHTML="Correct",t.style.backgroundColor="green",t.className="show",setTimeout((function(){t.className=t.className.replace("show","")}),3e3)},validate_one(){"s1.equals(s2)"==this.one.trim()&&"s1.compareTo(s2)"==this.two.trim()?(this.correct1(),alert("Correct")):(this.incorrect("Try again"),alert("Incorrect, please try again"))}}},N=e(89);const U=(0,N.Z)(S,[["render",C],["__scopeId","data-v-3249c55a"]]);var H=U}}]);
//# sourceMappingURL=945.65b670e1.js.map